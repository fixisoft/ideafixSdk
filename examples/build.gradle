/*
 * Copyright (c) Pierre-Yves Peton 2024.
 * All rights reserved
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

}

allprojects {

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    apply plugin: 'application'
    apply plugin: 'java'
    apply plugin: 'idea'

    ext {
        common = ['-dsa',
                  '-server',
                  '-Xms4g',
                  '-Xmx8g', //test heap <4G to exploit zero based compressed oops
                  '-XX:+UseZGC',// benchmarks show generational ZGC decreases performances for the moment
                  '-XX:+AlwaysPreTouch',
                  '-XX:+DisableExplicitGC',
                  '-XX:-UseCompressedOops',
                  '--add-opens',
                  'java.base/jdk.internal.misc=ALL-UNNAMED',
                  '--add-opens',
                  'java.base/sun.nio.ch=ALL-UNNAMED',
                  '--add-opens',
                  'java.base/java.nio=ALL-UNNAMED',
                  '--add-exports',
                  'java.base/jdk.internal.vm.annotation=ALL-UNNAMED',
                  '--enable-native-access=ALL-UNNAMED',
                  '-XX:+UnlockDiagnosticVMOptions',
                  '-XX:+AlwaysPreTouchStacks',
                  '-XX:+OmitStackTraceInFastThrow',
                  '-XX:-RestrictContended',
                  '-XX:-CheckIntrinsics',
                  '-XX:AutoBoxCacheMax=4096',
                  '-Dio.netty.tryReflectionSetAccessible=true',
                  '-Dio.netty.buffer.checkBounds=false',
                  '-Dio.netty.buffer.checkAccessible=false',
                  '-Dio.netty.allocator.useCacheForAllThreads=false',
                  '-Dio.netty.leakDetection.level=disabled',
                  '-Dio.netty.allocator.numHeapArenas=0',
                  '-Dio.netty.allocator.pageSize=16384',
                  '-Dio.netty.allocator.cacheTrimInterval=32768',
                  '-Dio.netty.recycler.chunkSize=256',
                  '-Dlog4j2.isWebapp=false',
                  '-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.BasicAsyncLoggerContextSelector',
                  '-Dlog4j2.enableThreadlocals=true',
                  '-Dlog4j2.enableDirectEncoders=true',
                  '-Dlog4j2.formatMsgAsync=true',
                  '-Dlog4j2.garbagefreeThreadContextMap=true',
                  '-Dlog4j2.clock=CachedClock',
                  '-Dlog4j2.disable.jmx=true',
                  '-Dlog4j2.initialReusableMsgSize=128',
                  '-Dlog4j2.maxReusableMsgSize=512',
                  '-Dlog4j2.layoutStringBuilderMaxSize=2048',
                  '-Dlog4j2.unboxRingbufferSize=16',
                  '-DAsyncLogger.SynchronizeEnqueueWhenQueueFull=false',
                  '-Dlog4j2.disableCloudConfigLoggingSystem=true',
                  '-DAsyncLogger.ThreadNameStrategy=CACHED',
                  '-DAsyncLogger.WaitStrategy=busyspin',
                  '-XX:+UnlockExperimentalVMOptions',
                  '-XX:+UseCharacterCompareIntrinsics',
                  '-XX:+UseLargePages',
                  '-XX:+UseCopySignIntrinsic',
                  '-XX:+UseSystemMemoryBarrier',
                  '-XX:+UseVectorCmov',
                  '-XX:+UseVectorizedHashCodeIntrinsic']

        allArgs = common + ['-XX:MaxGCPauseMillis=20']

        configurations.all {
            exclude group: "logback", module: "logback-classic"
            exclude group: "org.slf4j", module: "slf4j-log4j12"
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).all {
        options.compilerArgs += ['--add-exports',
                                 'java.base/jdk.internal.vm.annotation=ALL-UNNAMED',
                                 '--add-exports',
                                 'java.base/jdk.internal.misc=ALL-UNNAMED']
    }

    application {
        applicationDefaultJvmArgs = allArgs
    }

    idea {
        module {
            sourceDirs += file('src/main/java')
            resourceDirs += file('src/main/resources')
        }
    }

}
